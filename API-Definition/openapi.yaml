openapi: 3.0.3
info:
  title: Bookstore API
  version: 1.0.0-rc-not-security-reviewed
  description: |
    The **Books API** - allows searching of books from the book catalog as well as retrieving the specific details on a selected book. Once you find the book you are looking for, you can make an order. This is a simple API to demonstrate the capabilities between [SwaggerHub](https://swagger.io/tools/swaggerhub/) and AWS Gateway.
  termsOfService: http://swagger.io/terms/
  contact: 
    name: Frank Kilcommins
    email: info@smartbear.com
  license: 
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params:
    validateRequestBody: true
    validateRequestParameters: true
  body:
    validateRequestBody: true
    validateRequestParameters: false

tags:
  - name: Bookstore
    description: APIs for our fictional bookstore

servers:  
  - description: AWS API Gateway Endpoint
    url: https://example.com
 
paths:
  /books:
    get:
      summary: Get a list of Books based on the provided criteria
      description: |
        This API method supports searching the book catalog based on book title or author name
      operationId: getBooks
      x-amazon-apigateway-request-validator: params
      tags: 
        - Bookstore
      parameters: 
      - name: title
        description: The title (or partial title) of a book
        in: query
        required: false
        schema:
          type: string
      - name: author
        description: The author name (or partial author name)
        in: query
        required: false
        schema:
          type: string
      - name: limit
        description: The maximum number of books to return
        in: query
        required: false
        schema:
          type: integer
          default: 10          
      responses:
        '200':
          $ref: '#/components/responses/books'
        '400':
          description: 400 Bad Request
        '500':
          description: 500 Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetBooksFunction.Arn}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"  
  /books/{id}:
    get:
      summary: Get the details for a specific book
      description: Retrieve the full detailed response for a known book
      operationId: getBookById
      x-amazon-apigateway-request-validator: params
      tags:
      - Bookstore
      parameters: 
      - name: id
        description: The identifier for a book
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          $ref: '#/components/responses/book'
        '400':
          description: 400 Bad Request
        '404':
          description: 404 Not Found
        '500':
          description: 500 Internal Server Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSingleBookFunction.Arn}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy" 
  /orders:
    post:
      summary: Place book order
      operationId: createOrder
      x-amazon-apigateway-request-validator: params      
      tags:
      - Bookstore      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateOrderFunction.Arn}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"                 
  /orders/{orderId}:
    get:
      summary: Get book order details
      operationId: getOrderById
      x-amazon-apigateway-request-validator: params
      tags:
      - Bookstore
      parameters: 
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrderFunction.Arn}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"            
    put:
      summary: Update book order details
      operationId: updateOrderById
      x-amazon-apigateway-request-validator: params
      tags:
      - Bookstore      
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetails'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateOrderFunction.Arn}/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"                  
components:
  schemas:
    OrderDetails:
      properties:
        books:
          items:
            $ref: '#/components/schemas/BookOrder'
          type: array
        deliveryAddress:
          type: string
        id:
          type: integer
        createdAt:
          type: string
          format: date-time
          pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[012][0-9]:[0-5][0-9]:[0-5][0-9]Z$'
        updatedAt:
          type: string
          format: date-time
          pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[012][0-9]:[0-5][0-9]:[0-5][0-9]Z$'
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
      type: object
      required:
        - books
        - deliveryAddress
        - id
        - createdAt
        - updatedAt
    OrderStatusEnum:
      type: string
      enum:
        - placed
        - paid
        - delivered
    BookOrder:
      type: object
      properties:
        bookId:
          type: integer
        quantity:
          type: integer
    
    Order:
      properties:
        books:
          items:
            $ref: '#/components/schemas/BookOrder'
          type: array
        deliveryAddress:
          type: string
      type: object
      required:
        - books
        - deliveryAddress
    Book:
      description: The schema object for a Book
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          description: the identifier for a book
          example: 1001
        title:
          type: string
          description: The book title
          example: "Designing APIs with Swagger and OpenAPI"
        authors:
          type: array
          description: A list of book authors
          items:
            type: string
            description: A string holding an author's name
            minItems: 1
            example: "[Joshua S. Ponelat, Lukas L. Rosenstock]"
        published:
          type: string
          format: date
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
          example: "2022-05-01"
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
        msg:
          type: string
        type:
          type: string
      type: object
      required:
        - loc
        - msg
        - type
  responses:
    books:
      description: List of books
      content:
        application/json:
          schema:
            type: array
            minItems: 0
            items:
              $ref: '#/components/schemas/Book'
    book:
      description: Book details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
            
